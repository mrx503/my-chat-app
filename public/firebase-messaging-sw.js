
// This service worker file is intentionally left empty in the source code.
// It will be generated by the build process.

self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push Received.');
  if (!event.data) {
    console.error('[Service Worker] Push event but no data');
    return;
  }
  const data = event.data.json();
  console.log('[Service Worker] Push data: ', data);

  const title = data.title || 'New Message';
  const options = {
    body: data.body || 'You have a new message.',
    icon: '/logo.png', // Main icon for the notification
    badge: '/logo.png', // Small icon for the status bar (Android)
    vibrate: [200, 100, 200], // Vibration pattern
    tag: 'new-message', // Groups notifications
    renotify: true, // Re-notifies for new messages in the same group
    data: {
      url: data.url || '/', // URL to open on click
    },
    actions: [
      {
        action: 'open_chat',
        title: 'Open Chat',
      },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', (event) => {
  console.log('[Service Worker] Notification click Received.');

  event.notification.close();

  const urlToOpen = event.notification.data.url;

  // Handles both clicking the 'Open Chat' action and the notification body
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then((clientsArr) => {
      // If a window for this app is already open, focus it
      const hadWindowToFocus = clientsArr.some((windowClient) =>
        windowClient.url === urlToOpen ? (windowClient.focus(), true) : false
      );

      // Otherwise, open a new window
      if (!hadWindowToFocus)
        clients.openWindow(urlToOpen).then((windowClient) => (windowClient ? windowClient.focus() : null));
    })
  );
});
