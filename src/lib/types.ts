
import type { Timestamp } from "firebase/firestore";

// This is the shape of the Web Push API's PushSubscription object
export type PushSubscription = {
  endpoint: string;
  expirationTime?: number | null;
  keys: {
    p256dh: string;
    auth: string;
  };
};

export type User = {
  id: string; // This is the document ID from Firestore
  uid: string; // This is the Firebase Auth UID
  name: string;
  email: string;
  avatar: string;
  online?: boolean;
  lastSeen?: Timestamp | string; // Can be Timestamp from server or string on client
  privacySettings?: {
    showOnlineStatus?: boolean;
    showLastSeen?: boolean;
  };
  blockedUsers?: string[];
  followers?: string[];
  following?: string[];
  coins: number;
  systemMessagesQueue?: string[]; // Array of messages to be delivered by the system bot
  pushSubscription?: PushSubscription | null;
};

export type Message = {
  id: string;
  text: string;
  senderId: string; // Firebase Auth UID
  timestamp: Timestamp | Date;
  type?: 'text' | 'image' | 'file' | 'audio' | 'video'; // To distinguish message types
  fileURL?: string; // URL for the file/image/audio/video
  fileName?: string; // Name of the file
  status?: 'sent' | 'read';
  deletedFor?: string[]; // Array of user UIDs for whom the message is deleted
  isDeleted?: boolean; // True if deleted for everyone
  isAutoReply?: boolean; // True if the message was generated by AI
  senderName?: string;
  senderAvatar?: string;
};

export type Contact = User;

export type Chat = {
  id: string;
  users: string[]; // array of user UIDs
  contact: Contact; // The other user in the chat, enriched at runtime
  createdAt: Timestamp | string;
  encrypted?: boolean;
  chatPassword?: string;
  deletedFor?: string[];

  // --- NEW OPTIMIZED FIELDS ---
  lastMessageText?: string;
  lastMessageTimestamp?: Timestamp;
  lastMessageSenderId?: string;
  unreadCount?: { [uid: string]: number }; // Map of UID to their unread count
  
  // This is a transient property populated at runtime
  unreadMessages?: number; 
};

export type WithdrawalRequest = {
    id?: string;
    userId: string;
    email: string;
    amount: number;
    status: 'pending' | 'approved' | 'rejected';
    createdAt: Timestamp | string;
    updatedAt?: Timestamp | string;
    // --- Vodafone Cash Specific ---
    type: 'vodafone-cash' | 'fakka-card' | 'mobile-topup';
    vodafoneNumber?: string;
    // --- Fakka Card Specific ---
    operator?: 'Vodafone' | 'Etisalat' | 'Orange';
};

export type DepositRequest = {
    id?: string;
    userId: string;
    email: string;
    senderVodafoneNumber: string;
    amount: number; // Amount in EGP sent by the user
    status: 'pending' | 'approved' | 'rejected';
    createdAt: Timestamp | string;
    updatedAt?: Timestamp | string;
};
 
export type NotificationPayload = {
  title: string;
  body: string;
  url: string;
  icon?: string;
  tag?: string;
};

export type Clip = {
  id: string;
  videoUrl: string;
  caption: string;
  uploaderId: string;
  // Denormalized fields for performance
  uploaderName: string; 
  uploaderAvatar: string;
  timestamp: Timestamp;
  likes: string[]; // Array of user IDs who liked the clip
  commentsCount: number;
};

export type Comment = {
    id: string;
    text: string;
    userId: string;
    userName: string;
    userAvatar: string;
    timestamp: Timestamp;
};

export type AppNotification = {
    id?: string;
    recipientId: string;
    senderId: string;
    senderName: string;
    senderAvatar: string;
    type: 'like' | 'comment' | 'follow' | 'message' | 'gift';
    resourceId: string; // e.g., clipId, userId for follow, chatId for message
    message?: string; // Optional message, e.g., for comments or gift amount
    read: boolean;
    timestamp: Timestamp;
};
